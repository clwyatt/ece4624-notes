---
title: "ECE 4624: Meeting 10"
subtitle: "DT Block Diagrams and Signal Flow Graphs"
date: last-modified
author:
  - name: Chris Wyatt
    email: clwyatt@vt.edu
    affiliations: ECE@Virginia Tech

format: 
    
  html:
    default-image-extension: svg
    toc: true
    echo: false
    format-links: false

html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
---

Everything in DSP could be expressed purely as equations (difference equations, convolution sums, z-transforms). But graphical approaches, block diagrams and signal flow graphs in particular, provide structural clarity, implementation insight, and intuition that math alone hides.

In this lecture we review the basics of block diagrams, a more compact version called signal-flow graphs, and discuss system realization (which may or may not be review).

As we will see, FIR and IIR filters are often designed and implemented via SFGs, which reveal multiplier counts, delay elements, and numerical sensitivity. They are often referred to as the schematics or circuits of signal processing.

# Review of Block Diagrams

See the corresponding [ECE 2714 Notes](https://clwyatt.github.io/notes-2714/11-dt-block.html).

# Signal Flow Graphs

An alternative to block diagrams is a diagram called a signal-flow graph or SFG, also called a computation graph. They are easier to draw and have connections to graph theory and associated algorithms.

Some basic terminology:

* A signal-flow graph is a weighted, directed graph consisting of nodes and edges (pairs of nodes).
* The direction of an edge is given by the ordering of the pair of nodes, with the first being the originating (starting) node and the second being the destination (ending) node, with the direction from first to second.
* Edges have a weight given by a transfer functions, which may be unity.
* Nodes with no incomming edges are called source nodes.
* Nodes with no outgoing edges are called sink nodes.

This makes it possible to use graphy theory to reason and automate manipulations of SFGs.

A SFG replaces the symbol for summations in block diagram with the graph nodes. The nodes represent signals, implicitly defined as the sum of the signals along incoming edges. Connections beteen nodes (edges) denote the direction by an arrow, and optionally a transfer function by an arrow label.

The edges can be represented my an adjacency matrix, where the rows denote the originating node and the columns the destination node. This makes it easy to compute basic graph characteristics and manipulations.

An important example is the graph transpose:

1. reverse the direction of all edges
2. interchange the input and output (source becomes sink and sink becomes source)

This is easily computed as the transpose of the adjacency matrix, leaving the transfer functions alone.

Example: Convert the following block diagram to a SFG. List the nodes (label and value) and edges (pairs and weights). Include an adjacency matrix. Then compute the transpose graph.

# System Realization using Signal Flow Graphs

An important application of bllock diagrams and signal flow graphs is the implementation, or realization, of a system from a transfer function. This is because filter design is the process of specifying a transfer functions coefficients, while the implementation uses basic operations (MAC).

Each of the following implementations are mathematically equivalent but vary in computational complexity, memory complexity, finite word-length effects, and low-level aspects like parallelism, pipelining, and cache usage.

Today we will review the basic forms you may have seen in ECEC 3704. We will cover two others, namely the lattice and lattice-ladder, later in the course.

## Direct Form I

## Direct Form II

## Transposed Direct Form II

## Parallel Form

## Cascade of Second-Order Stages (SOS)




